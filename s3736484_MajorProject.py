#importing required libraries 
import osgeo.gdal
from qgis.core import *
from qgis.PyQt.QtCore import QVariant
from qgis.core import QgsField, QgsExpression, QgsFeature
from qgis.core import QgsField, QgsExpression, QgsFeature
from PyQt5.QtCore import QVariant
import processing

#-----------1St Step creating microclimate indexes ans normalise the data to composite final micro-climate index

#1.1 creating Vegetation Health Index using NDVI and LST data (transforming NDVI to VCI(vegetation Health Index) and LST to TCI(temperature condition Index))

# import NDVI data giving the path folder
NDVI_layer = iface.addVectorLayer("D:/Python_project/ID_data/MDRI_sesons/Autumn/ndvi_autumn.shp","ndvi_autumn","ogr")
# giving the output file path
outputfilepath = 'D:/Python_project/ID_data/MDRI_sesons/Autumn/'
#giving output file name
VHI_output = 'VHI_autumn.shp'
# giving the 
VH_SMoutput = 'VH_SM.shp'
IMCI_output = 'Microclimate_Autumn.shp'
Final_output = 'Food_production.shp'

#active the imported NDVI layer to execute data and update the fields
NDVI_layer=iface.activeLayer()
#giving the field name to be excuted (ndvi values field))
idx=NDVI_layer.fields().indexFromName("ndvi")
#getting the minimum and maximum values of the field
max = NDVI_layer.maximumValue(idx)
min = NDVI_layer.minimumValue(idx)

#state the formula to create the vegetation health index
expression = QgsExpression(f"((ndvi - {min}) / ({max} - {min}))*100")
ex1 = QgsExpression(expression)
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(NDVI_layer))

#upadating the new index values 
layer_provider=NDVI_layer.dataProvider()
layer_provider.addAttributes([QgsField("vci",QVariant.Double)])
NDVI_layer.updateFields()

with edit(NDVI_layer):
    for (f) in NDVI_layer.getFeatures():
        context.setFeature(f)
        f["vci"]=ex1.evaluate(context)
        NDVI_layer.updateFeature(f)

#importing LST layer        
LST_layer = iface.addVectorLayer("D:/Python_project/ID_data/MDRI_sesons/Autumn/lst_autumn.shp","lst_autumn","ogr")

#calculate lst to a newfield
lstnew_layer = LST_layer
#giving the field name to be excuted 
layer_provider=lstnew_layer.dataProvider()
layer_provider.addAttributes([QgsField("newmean",QVariant.Double)])
lstnew_layer.updateFields()

#creating the expression for lst calculatio
expression = QgsExpression('("lst"*0.02)-273.15')
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(lstnew_layer))

#update the new field
with edit(lstnew_layer):
    for (f) in lstnew_layer.getFeatures():
        context.setFeature(f)
        f["newmean"]=expression.evaluate(context)
        lstnew_layer.updateFeature(f)

#Calculate TCI executing new lst values        
lstnew_layer=iface.activeLayer()
#giving the field to be executed
idx=LST_layer.fields().indexFromName("newmean")
#getting the minimum and maximum values of the field
max = lstnew_layer.maximumValue(idx)
min = lstnew_layer.minimumValue(idx)

#creating the formula to calculate TCI
expression2 = QgsExpression(f"(({max} - newmean) / ({max} - {min}))*100")
ex2 = QgsExpression(expression2)
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(lstnew_layer))

#updating the new field
layer_provider=lstnew_layer.dataProvider()
layer_provider.addAttributes([QgsField("tci",QVariant.Double)])
lstnew_layer.updateFields()

with edit(lstnew_layer):
    for (f) in lstnew_layer.getFeatures():
        context.setFeature(f)
        f["tci"]=ex2.evaluate(context)
        lstnew_layer.updateFeature(f)
        
#creating dictionary for parameters for join the attributes (VCI and TCI)
joinparams={'INPUT' :NDVI_layer,\
        'FIELD':'ID',\
        'INPUT_2':lstnew_layer,\
        'FIELD_2':'ID',\
        'METHOD' :1,\
        'DISCARD_NONMATCHING':"False",\
        'OUTPUT' : outputfilepath + VHI_output}

#join by attribute
processing.run("native:joinattributestable", joinparams)
#join by attributes
joinattribute = iface.addVectorLayer(outputfilepath + VHI_output, "","ogr")

#create the Vegetation Health Index
layer_vhi = joinattribute
layer_provider=layer_vhi.dataProvider()
layer_provider.addAttributes([QgsField("VHI_autumn",QVariant.Double)])
layer_vhi.updateFields()

#Creating formula to calcute the index
expression3 = QgsExpression('((0.5*"vci")+(0.5*"tci"))/100')
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer_vhi))

#updating the field
with edit(layer_vhi):
    for (f) in layer_vhi.getFeatures():
        context.setFeature(f)
        f["VHI_autumn"]=expression3.evaluate(context)
        layer_vhi.updateFeature(f)

#1.2 Calculating Soil Moisture Index
#importing soil moisture data
SMI_layer = iface.addVectorLayer("D:/Python_project/ID_data/MDRI_sesons/Autumn/smi_autumn.shp","smi_autumn","ogr")

#active the layer to excecute the data
SMI_layer=iface.activeLayer()
#getting the field to which to be executed
idx=SMI_layer.fields().indexFromName("soil_moi")
#getting the minimum and maximum vaues of the field
max = SMI_layer.maximumValue(idx)
min = SMI_layer.minimumValue(idx)

#creating the formula to calculate Soil Moisture Index
expression4 = QgsExpression(f"(soil_moi - {min}) / ({max} - {min})")
ex3 = QgsExpression(expression4)
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(SMI_layer))

#updating new field "smi"
layer_provider=SMI_layer.dataProvider()
layer_provider.addAttributes([QgsField("smi_autumn",QVariant.Double)])
SMI_layer.updateFields()

with edit(SMI_layer):
    for (f) in SMI_layer.getFeatures():
        context.setFeature(f)
        f["smi_autumn"]=ex3.evaluate(context)
        SMI_layer.updateFeature(f)

#1.3 calculating Standardized Precipitation Index using rainfall data
#importing the rainfall data
SPI_layer = iface.addVectorLayer("D:/Python_project/ID_data/MDRI_sesons/Autumn/rain_autumn.shp","rain_autumn","ogr")

#standardized the data in a new field
layer1 = SPI_layer
layer_provider=layer1.dataProvider()
layer_provider.addAttributes([QgsField("Rspi",QVariant.Double)])
layer1.updateFields()

#getting Standard Daviation and mean values of the rainfall data
layer1=iface.activeLayer()
mean = layer1.aggregate(QgsAggregateCalculator.Mean, "rain")
stdev = layer1.aggregate(QgsAggregateCalculator.StDev, "rain")

#creating formula to calculate the Standardized rainfall
expression = QgsExpression(f'("rain"-{mean[0]})/{stdev[0]}')
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer1))

#updating the field
with edit(layer1):
    for (f) in layer1.getFeatures():
        context.setFeature(f)
        f["Rspi"]=expression.evaluate(context)
        layer1.updateFeature(f)

#getting the field to calculate the SPI
idx=layer1.fields().indexFromName("Rspi")
max =layer1.maximumValue(idx)
min =layer1.minimumValue(idx)

#creating the expression to normalize
expression2 = QgsExpression(f"(Rspi - {min}) / ({max} - {min})")
ex2 = QgsExpression(expression2)
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer1))

#Updating the field
layer_provider=layer1.dataProvider()
layer_provider.addAttributes([QgsField("spi_autumn",QVariant.Double)])
layer1.updateFields()

with edit(layer1):
    for (f) in layer1.getFeatures():
        context.setFeature(f)
        f["spi_autumn"]=ex2.evaluate(context)
        layer1.updateFeature(f)
        
#join three indexes together to composite the final microclimate index
joinparams2={'INPUT' :layer_vhi,\
        'FIELD':'ID',\
        'INPUT_2':SMI_layer,\
        'FIELD_2':'ID',\
        'METHOD' :1,\
        'DISCARD_NONMATCHING':"False",\
        'OUTPUT' : outputfilepath + VH_SMoutput}
        
processing.run("native:joinattributestable", joinparams2)
#join by attributes
joinattribute2 = iface.addVectorLayer(outputfilepath + VH_SMoutput, "","ogr")

joinparams2={'INPUT' :joinattribute2,\
        'FIELD':'ID',\
        'INPUT_2':layer1,\
        'FIELD_2':'ID',\
        'METHOD' :1,\
        'DISCARD_NONMATCHING':"False",\
        'OUTPUT' : outputfilepath + IMCI_output}
        
processing.run("native:joinattributestable", joinparams2)
#join by attributes
joinattribute2 = iface.addVectorLayer(outputfilepath + IMCI_output, "","ogr")

#compositing final micro climate index
IMIC_layer = joinattribute2

#creating the expression to calculate the final index
expression_IMIC = QgsExpression('("VHI_autumn"+"smi_autumn"+"spi_autumn")/3')
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(IMIC_layer))

layer_provider=IMIC_layer.dataProvider()
#giving the new field name
layer_provider.addAttributes([QgsField("IMIC",QVariant.Double)])
IMIC_layer.updateFields()

#updating the new layer
with edit(IMIC_layer):
    for (f) in IMIC_layer.getFeatures():
        context.setFeature(f)
        f["IMIC"]=expression_IMIC.evaluate(context)
        IMIC_layer.updateFeature(f)
        
targetField = 'IMIC'
rangeList = []
opacity = 1

# define value ranges
minVal = 0
maxVal = 0.2
# range label
lab = 'Extreme'

# color (Orange)
rangeColor = QtGui.QColor('#FFA500')

# create symbol and set properties
symbol1 = QgsSymbol.defaultSymbol(IMIC_layer.geometryType())
symbol1.setColor(rangeColor)
symbol1.setOpacity(opacity)

#create range and append to rangeList
range1 = QgsRendererRange(minVal, maxVal, symbol1, lab)
rangeList.append(range1)

# define value ranges
minVal = 0.200001
maxVal = 0.4

# range label
lab = 'Severe'

# color (Electric yellow)
rangeColor = QtGui.QColor('#FFFF00')

# create symbol and set properties
symbol2 = QgsSymbol.defaultSymbol(IMIC_layer.geometryType())
symbol2.setColor(rangeColor)
symbol2.setOpacity(opacity)

#create range and append to rangeList
range2 = QgsRendererRange(minVal, maxVal, symbol2, lab)
rangeList.append(range2)

minVal = 0.400001
maxVal = 0.6

# range label
lab = 'Normal'

# color (Cyan)
rangeColor = QtGui.QColor('#00FFFF')

# create symbol and set properties
symbol3 = QgsSymbol.defaultSymbol(IMIC_layer.geometryType())
symbol3.setColor(rangeColor)
symbol3.setOpacity(opacity)

#create range and append to rangeList
range3 = QgsRendererRange(minVal, maxVal, symbol3, lab)
rangeList.append(range3)

minVal = 0.600001
maxVal = 0.8

# range label
lab = 'Wet'

# color (Electric green)
rangeColor = QtGui.QColor('#00FF00')

# create symbol and set properties
symbol3 = QgsSymbol.defaultSymbol(IMIC_layer.geometryType())
symbol3.setColor(rangeColor)
symbol3.setOpacity(opacity)

#create range and append to rangeList
range3 = QgsRendererRange(minVal, maxVal, symbol3, lab)
rangeList.append(range3)

minVal = 0.800001
maxVal = 1

# range label
lab = 'Very Wet'

# color (Olive green)
rangeColor = QtGui.QColor('#808000')

# create symbol and set properties
symbol4 = QgsSymbol.defaultSymbol(IMIC_layer.geometryType())
symbol4.setColor(rangeColor)
symbol4.setOpacity(opacity)

#create range and append to rangeList
range4 = QgsRendererRange(minVal, maxVal, symbol4, lab)
rangeList.append(range4)

# create the renderer
groupRenderer = QgsGraduatedSymbolRenderer('', rangeList)
groupRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
groupRenderer.setClassAttribute(targetField)

# apply renderer to layer
IMIC_layer.setRenderer(groupRenderer)


# add to QGIS interface
QgsProject.instance().addMapLayer(IMIC_layer)
        
# -----------------------------2nd step find the Gross Primary Products and micro-climate vulnerability of Crops in Ballerat-------

#set the folder paths for both raster (and vector files, define the names of the files)land use land cover)
inputfilepath = 'D:/Python_project/GPP/'
input_raster='reclass.tif'
#giving output file path
outputfilepath = 'D:/Python_project/GPP/'
#name the file to get the values
lulcLayer = iface.addRasterLayer(inputfilepath + 'reclass.tif', \
input_raster[:-4])

#importing GPP layer
GPP_autumn = iface.addVectorLayer("D:/Python_project/ID_data/GPP/gpp.shp","GPP_autumn","ogr")
Gpp_outautumn = 'D:/Python_project/ID_data/MDRI_sesons/Autumn/'
GPP_autumnoutput = 'GPPAutumn.shp'

#active the layer to exceute the data
GPP_autumn=iface.activeLayer()
#name the field to be executed
idx=GPP_autumn.fields().indexFromName("GPP")
#getting minimum and maximum values
max = GPP_autumn.maximumValue(idx)
min = GPP_autumn.minimumValue(idx)

#creating the formula to calculate the index
expression = QgsExpression(f"((GPP - {min}) / ({max} - {min}))")
ex1 = QgsExpression(expression)
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(GPP_autumn))

#updating the field
layer_provider=GPP_autumn.dataProvider()
layer_provider.addAttributes([QgsField("gpp_autumn",QVariant.Double)])
GPP_autumn.updateFields()

with edit(GPP_autumn):
    for (f) in GPP_autumn.getFeatures():
        context.setFeature(f)
        f["gpp_autumn"]=ex1.evaluate(context)
        GPP_autumn.updateFeature(f)

#giving the output file path to zonal hiso layer        
hist_output='Zonal.shp'
#create the dictionary for zonal histogram parameters
histParams = {"INPUT_RASTER" : lulcLayer,\
        "RASTER_BAND" : 1,\
        "INPUT_VECTOR" : GPP_autumn,\
        "OUTPUT" : outputfilepath + hist_output}
#zonal histogram process
processing.run("qgis:zonalhistogram", histParams)
#add the zonal layer to the canvas
zonal = iface.addVectorLayer(outputfilepath + hist_output, "","ogr")

layer=zonal#creating the expression to calculate the percentage of crops of the area
ex2=QgsExpression('("HISTO_5"/("HISTO_1"+"HISTO_2"+"HISTO_3"+"HISTO_4"+"HISTO_5"+"HISTO_6"+"HISTO_7"+"HISTO_8"))*100')
ex = QgsExpression(ex2)
context = QgsExpressionContext()
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer))

#updating the layer
layer_provider=zonal.dataProvider()
layer_provider.addAttributes([QgsField("percentage",QVariant.Double)])
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer))

with edit(layer):
    for (f) in layer.getFeatures():
        context.setFeature(f)
        f["percentage"]=ex.evaluate(context)
        layer.updateFeature(f)
    
#join all layers together to calculate the vulnerability of cropd based on composite microclimate index
joinparams3={'INPUT' :IMIC_layer,\
        'FIELD':'ID',\
        'INPUT_2':layer,\
        'FIELD_2':'ID',\
        'METHOD' :1,\
        'DISCARD_NONMATCHING':"False",\
        'OUTPUT' : outputfilepath + Final_output}
        
processing.run("native:joinattributestable", joinparams3)
#join by attributes
joinattributefinal = iface.addVectorLayer(outputfilepath + Final_output, "","ogr")

Vulnerability = joinattributefinal

#crop land classificationAttributeExpression
#updating the layer
layer_provider=Vulnerability.dataProvider()
layer_provider.addAttributes([QgsField("scale",QVariant.String),\
QgsField("production",QVariant.String),\
QgsField("vulner",QVariant.String)])
context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(Vulnerability))

#crop are classification
with edit(Vulnerability):
    for Features in Vulnerability.getFeatures():
        if Features ['percentage'] <=25:
            Features['scale']= 'small'
        elif Features['percentage'] >25 and Features['percentage']<=60:
            Features['scale']= 'medium'
        if Features ['percentage'] >60:
            Features['scale']= 'large'
        Vulnerability.updateFeature(Features)

#finding food prodcuction level
with edit(Vulnerability):
    for Features in Vulnerability.getFeatures():
        if Features ['gpp_autumn'] <=0.2:
            Features['production']= 'poor'
        elif Features ['gpp_autumn'] >0.2 and Features ['gpp_autumn'] <=0.4:
            Features['production']= 'low quality'
        elif Features ['gpp_autumn'] >0.4 and Features ['gpp_autumn'] <=0.6:
            Features['production']= 'normal'
        elif Features ['gpp_autumn'] >0.6 and Features ['gpp_autumn'] <=0.8:
            Features['production']= 'quality'
        elif Features ['gpp_autumn'] >0.8:
            Features['production']= 'high'
        Vulnerability.updateFeature(Features)

#finding the vulnerability level of area
with edit(Vulnerability):
    for Features in Vulnerability.getFeatures():
        if Features ['IMIC'] <=0.2:
            Features['vulner']= 'Extreme'
        elif Features ['IMIC'] >0.2 and Features ['IMIC'] <=0.4:
            Features['vulner']= 'Severe'
        elif Features ['IMIC'] >0.4 and Features ['IMIC'] <=0.6:
            Features['vulner']= 'Normal'
        elif Features ['IMIC'] >0.6 and Features ['IMIC'] <=0.8:
            Features['vulner']= 'wet'
        elif Features ['IMIC'] >0.8:
            Features['vulner']= 'very wet'
        Vulnerability.updateFeature(Features)    

idx=Vulnerability.fields().indexFromName("production")
max = Vulnerability.maximumValue(idx)
print(max)
min = Vulnerability.minimumValue(idx)
print(min)
        
import sys
#from tkinter import *
#from PyQt4 import *
from PyQt5 import QtGui
from PyQt5.QtCore import * 

targetField = 'gpp_autumn'
rangeList = []
opacity = 1

# define value ranges
minVal = 0
maxVal = 0.2
# range label
lab = 'Poor'

# color (Golden Yellow)
rangeColor = QtGui.QColor('#ffee00')

# create symbol and set properties
symbol1 = QgsSymbol.defaultSymbol(Vulnerability.geometryType())
symbol1.setColor(rangeColor)
symbol1.setOpacity(opacity)

#create range and append to rangeList
range1 = QgsRendererRange(minVal, maxVal, symbol1, lab)
rangeList.append(range1)

# define value ranges
minVal = 0.200001
maxVal = 0.4

# range label
lab = 'low quality'

# color (Spring Bud)
rangeColor = QtGui.QColor('#AAFF00')

# create symbol and set properties
symbol2 = QgsSymbol.defaultSymbol(Vulnerability.geometryType())
symbol2.setColor(rangeColor)
symbol2.setOpacity(opacity)

#create range and append to rangeList
range2 = QgsRendererRange(minVal, maxVal, symbol2, lab)
rangeList.append(range2)

minVal = 0.400001
maxVal = 0.6

# range label
lab = 'Normal'

# color (Celadon)
rangeColor = QtGui.QColor('#AFE1AF')

# create symbol and set properties
symbol3 = QgsSymbol.defaultSymbol(Vulnerability.geometryType())
symbol3.setColor(rangeColor)
symbol3.setOpacity(opacity)

#create range and append to rangeList
range3 = QgsRendererRange(minVal, maxVal, symbol3, lab)
rangeList.append(range3)

minVal = 0.600001
maxVal = 0.8

# range label
lab = 'High'

# color (cadet blue)
rangeColor = QtGui.QColor('#5F9EA0')

# create symbol and set properties
symbol3 = QgsSymbol.defaultSymbol(Vulnerability.geometryType())
symbol3.setColor(rangeColor)
symbol3.setOpacity(opacity)

#create range and append to rangeList
range3 = QgsRendererRange(minVal, maxVal, symbol3, lab)
rangeList.append(range3)

minVal = 0.800001
maxVal = 1

# range label
lab = 'Very High'

# color (pine green)
rangeColor = QtGui.QColor('#097969')

# create symbol and set properties
symbol4 = QgsSymbol.defaultSymbol(Vulnerability.geometryType())
symbol4.setColor(rangeColor)
symbol4.setOpacity(opacity)

#create range and append to rangeList
range4 = QgsRendererRange(minVal, maxVal, symbol4, lab)
rangeList.append(range4)

# create the renderer
groupRenderer = QgsGraduatedSymbolRenderer('', rangeList)
groupRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
groupRenderer.setClassAttribute(targetField)

# apply renderer to layer
Vulnerability.setRenderer(groupRenderer)


# add to QGIS interface
QgsProject.instance().addMapLayer(Vulnerability)